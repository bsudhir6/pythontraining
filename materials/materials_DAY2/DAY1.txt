Microsoft Windows [Version 6.3.9600]
(c) 2013 Microsoft Corporation. All rights reserved.

D:\Desktop\PPT>cd python/hands

D:\Desktop\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> a = 1
>>> type(a)
<class 'int'>
>>> f = 1.2
>>> type(f)
<class 'float'>
>>> s = "OK"
>>> type(s)
<class 'str'>
>>> b = True
>>> type(b)
<class 'bool'>
>>> int("1")
1
>>> str(1)
'1'
>>> a > 1
False
>>> a < 1
False
>>> a == 1
True
>>> a != 1
False
>>> 1 + 1
2
>>> 1 - 1
0
>>> 1/2
0.5
>>> 1//2
0
>>> 1 % 2
1
>>> True and True
True
>>> True or True
True
>>> not True
False
>>> a == 1 and a > 1
False
>>> print(a)
1
>>> print(var)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'var' is not defined
>>> var = 1
>>> print(var)
1
>>> print(a)
1
>>> if a == 1:
...     print(a)
...
1
>>> if a == 1:
...     print(a)
...     print(a)
...     print(a)
...
1
1
1
>>> if a == 1:
...     print(a)
... else:
...     print(a)
...
1
>>> if a == 1:
...     print(a)
... elif a > 1:
...     print(a)
... else:
...     print(a)
...
1
>>> quit()

D:\Desktop\PPT\python\hands>python first.py hello
hello

D:\Desktop\PPT\python\hands>python first.py hello world
hello

D:\Desktop\PPT\python\hands>python first.py hello world
hello
world

D:\Desktop\PPT\python\hands>python first.py 1 2
3

D:\Desktop\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> help(print)
Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)

    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.

>>> print(1,2,3,"OK")
1 2 3 OK
>>> print(1,2,3,"OK", sep=":", end="???\n")
1:2:3:OK???
>>> print(1,2,3,"OK", sep="None", end="???\n")
1None2None3NoneOK???
>>> print(1,2,3,"OK", sep="None", end="???")
1None2None3NoneOK???>>>
>>> #ndas1971@gmail.com
...
>>> s = "Hello"
>>> s = 'Hello'
>>> type(s)
<class 'str'>
>>> s = """Hello
... world"""
>>> s
'Hello\nworld'
>>> print(s)
Hello
world
>>> s
'Hello\nworld'
>>> len(s)
11
>>> "He" in s
True
>>> "He" not in s
False
>>> s == "Hello"
False
>>> s != "H"
True
>>> s[0]
'H'
>>> s[0] = 'K'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> ss = "\n"
>>> len(ss)
1
>>> ss = "\\n"
>>> len(ss)
2
>>> ss = r"\n"
>>> len(ss)
2
>>> type(ss)
<class 'str'>
>>> 1/2
0.5
>>> "1/2"
'1/2'
>>> s[0] = 'K'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> s
'Hello\nworld'
>>> s1 = s + " OK"
>>> s1
'Hello\nworld OK'
>>> s
'Hello\nworld'
>>> s = s + "OK"
>>> s
'Hello\nworldOK'
>>> tmp = s + "OK"
>>> s = tmp
>>> type(s)
<class 'str'>
>>> s = 1
>>> type(s)
<class 'int'>
>>> s = True
>>> type(s)
<class 'bool'>
>>> s
True
>>> s = "Hello"
>>> s[0]
'H'
>>> s[0] = 'K'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>>
>>> s
'Hello'
>>> s + " World"
'Hello World'
>>> s
'Hello'
>>> s * 4
'HelloHelloHelloHello'
>>> "%d %s %3.2f" % (1, "Ok", 3.456)
'1 Ok 3.46'
>>> s = "Hello World"
>>> len(s)
11
>>> "Hk" in s
False
>>> "Hk" not in s
True
>>> s == "Hello World"
True
>>> for e in s:
...     print(e)
...
H
e
l
l
o

W
o
r
l
d
>>> e
'd'
>>> c = 0
>>> c = c + 1
>>> quit()

D:\Desktop\PPT\python\hands>python first.py
Traceback (most recent call last):
  File "first.py", line 3, in <module>
    a = sys.argv[1]
IndexError: list index out of range

D:\Desktop\PPT\python\hands>python first.py
H - 1
e - 1
l - 3
l - 3
o - 2
  - 1
W - 1
o - 2
r - 1
l - 3
d - 1

D:\Desktop\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> s = "Hello"
>>> len(s)
5
>>> "H" in s
True
>>> s == "OK"
False
>>>
>>>
>>> for e in s:
...     print(e)
...
H
e
l
l
o
>>> s
'Hello'
>>>
>>> s[0]
'H'
>>> s[-1]
'o'
>>> s[len(s)-1]
'o'
>>> s[-1]
'o'
>>> s[-len(s)]
'H'
>>> s[-5],s[-4],s[-3],s[-2],s[-1]
('H', 'e', 'l', 'l', 'o')
>>> s
'Hello'
>>> s[0:3]
'Hel'
>>> #s[start:end:step]
...
>>> s[0:3:1]
'Hel'
>>> s[0:3:2]
'Hl'
>>> s[::1]
'Hello'
>>> s[:]
'Hello'
>>> s[::-1]
'olleH'
>>> s[0:3:2]
'Hl'
>>> s[0],s[0+2]
('H', 'l')
>>> s
'Hello'
>>> s[0:4:2]
'Hl'
>>> s[0:5:2]
'Hlo'
>>> s
'Hello'
>>> type(s)
<class 'str'>
>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__'
, '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__r
epr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subcl
asshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', '
expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isd
ecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'issp
ace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'pa
rtition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip
', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate
', 'upper', 'zfill']
>>> help(str.split)
Help on method_descriptor:

split(...)
    S.split(sep=None, maxsplit=-1) -> list of strings

    Return a list of the words in S, using sep as the
    delimiter string.  If maxsplit is given, at most maxsplit
    splits are done. If sep is not specified or is None, any
    whitespace string is a separator and empty strings are
    removed from the result.

>>> s = "Hello World"
>>> s.split(" ")
['Hello', 'World']
>>> help(str.strip)
Help on method_descriptor:

strip(...)
    S.strip([chars]) -> str

    Return a copy of the string S with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.

>>> s = "Hello World"
>>> s.strip("e")
'Hello World'
>>> s.strip("H")
'ello World'
>>> s.strip("H").split()
['ello', 'World']
>>>
>>> l = [1,2,3,"ok", 4.5, [1,2,3]]
>>> type(l)
<class 'list'>
>>> el = []
>>> type(el)
<class 'list'>
>>> len(l)
6
>>> "ok" in l
True
>>> "ok" not in l
False
>>> l == [1,2]
False
>>> l != [1,2]
True
>>> for e in l:
...     print(e)
...
1
2
3
ok
4.5
[1, 2, 3]
>>> l
[1, 2, 3, 'ok', 4.5, [1, 2, 3]]
>>> l[0]
1
>>> l[0] = 100
>>> l
[100, 2, 3, 'ok', 4.5, [1, 2, 3]]
>>> []
[]
>>> [1]
[1]
>>> [1,2]
[1, 2]
>>> l = list(range(5))
>>> l = list(range(0,5,1))
>>> l
[0, 1, 2, 3, 4]
>>> l2 = l + [100]
>>> l2
[0, 1, 2, 3, 4, 100]
>>> l
[0, 1, 2, 3, 4]
>>> l.append(200)
>>> l
[0, 1, 2, 3, 4, 200]
>>> l += [300,400]
>>> l
[0, 1, 2, 3, 4, 200, 300, 400]
>>> l
[0, 1, 2, 3, 4, 200, 300, 400]
>>> l = l + [400]
>>> l
[0, 1, 2, 3, 4, 200, 300, 400, 400]
>>> tmp = l + [400]
>>> l = tmp
>>>
>>> l = [1,2,3,4]
>>> res= [1,4,9,16]
>>> res = []
>>> for e in l:
...     res.append(e*e)
...
>>> res
[1, 4, 9, 16]
>>> res = []
>>> for e in l:
...     res += [e*e]
...
>>> res
[1, 4, 9, 16]
>>> for e in l:
...     res = res + [e*e]
...
>>> res
[1, 4, 9, 16, 1, 4, 9, 16]
>>>
>>> l = [1,2,3,4]
>>> res = [1,3]
>>>
>>> res = []
>>> for e in l:
...     if e%2 == 1:
...             res.append(e)
...
>>> res
[1, 3]
>>> l = [1,2,3,4]
>>> res= [1,9]
>>> res = []
>>> for e in l:
...     if e%2 == 1:
...             res.append(e*e)
...
>>> res
[1, 9]
>>> []
[]
>>> rl = []
>>> len(rl)
0
>>> rl.append(200)
>>> 200 in rl
True
>>> rl == [200]
True
>>> rl
[200]
>>> rl * 4
[200, 200, 200, 200]
>>> l = list(range(5))
>>> l
[0, 1, 2, 3, 4]
>>> l[0]
0
>>> l[-1]
4
>>> l[0:4:2]  #l[start:end:step]
[0, 2]
>>> l[0:4:2]  #l[start:end:step]
[0, 2]
>>> l[::-1]
[4, 3, 2, 1, 0]
>>> l[:]
[0, 1, 2, 3, 4]
>>> l
[0, 1, 2, 3, 4]
>>> l[:0] = [99,200]
>>> l
[99, 200, 0, 1, 2, 3, 4]
>>> l[len(l):] = [300,200]
>>> l
[99, 200, 0, 1, 2, 3, 4, 300, 200]
>>> l[2:2] = [ 44,55]
>>> l
[99, 200, 44, 55, 0, 1, 2, 3, 4, 300, 200]
>>> l[0:5] = [77]
>>> l
[77, 1, 2, 3, 4, 300, 200]
>>> l = [99, 200, 44, 55, 0, 1, 2, 3, 4, 300, 200]
>>>
>>> l[0:5]
[99, 200, 44, 55, 0]
>>> l[0:5] = [77]
>>> l = [99, 200, 44, 55, 0, 1, 2, 3, 4, 300, 200]
>>> l[2:2]
[]
>>> l[2:2] = [ 43,55]
>>> l
[99, 200, 43, 55, 44, 55, 0, 1, 2, 3, 4, 300, 200]
>>> l
[99, 200, 43, 55, 44, 55, 0, 1, 2, 3, 4, 300, 200]
>>> l[::2] = ["OK"] * len(l[::2])
>>> l
['OK', 200, 'OK', 55, 'OK', 55, 'OK', 1, 'OK', 3, 'OK', 300, 'OK']
>>> l = [99, 200, 44, 55, 0, 1, 2, 3, 4, 300, 200]
>>> l[::2]
[99, 44, 0, 2, 4, 200]
>>> s = '[1,2,3,4,5]'
>>> res = [1,2,3,4,5]
>>> help(str.strip)
Help on method_descriptor:

strip(...)
    S.strip([chars]) -> str

    Return a copy of the string S with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.

>>> help(str.split)
Help on method_descriptor:

split(...)
    S.split(sep=None, maxsplit=-1) -> list of strings

    Return a list of the words in S, using sep as the
    delimiter string.  If maxsplit is given, at most maxsplit
    splits are done. If sep is not specified or is None, any
    whitespace string is a separator and empty strings are
    removed from the result.

>>>
>>>
>>>
>>> s
'[1,2,3,4,5]'
>>>  for e in l:
  File "<stdin>", line 1
    for e in l:
    ^
IndentationError: unexpected indent
>>>      res.append(e*e)
  File "<stdin>", line 1
    res.append(e*e)
    ^
IndentationError: unexpected indent
>>>
>>>
>>>
>>> s
'[1,2,3,4,5]'
>>> res = []
>>> for e in s.strip('[]').split(','):
...     res.append(int(e))
...
>>> res
[1, 2, 3, 4, 5]
>>>
>>> l = [1,2,3,4]
>>> c = 0
>>> while c < 3:
...     l = [l]
...     c += 1
...
>>> l
[[[[1, 2, 3, 4]]]]
>>> l = [1,2,3,4]
>>> c = 0
>>> l = [l]
>>> l
[[1, 2, 3, 4]]
>>> c += 1
>>> c
1
>>> l = [l]
>>> l
[[[1, 2, 3, 4]]]
>>> c += 1
>>> c
2
>>> l = [l]
>>> l
[[[[1, 2, 3, 4]]]]
>>> c += 1
>>> c
3
>>> l = [1,2,3,4]
>>> c = 0
>>> while c < 3:
...     l = [l]
...     c += 1
...     print(l, c)
...
[[1, 2, 3, 4]] 1
[[[1, 2, 3, 4]]] 2
[[[[1, 2, 3, 4]]]] 3
>>> l
[[[[1, 2, 3, 4]]]]
>>> l
[[[[1, 2, 3, 4]]]]
>>> l
[[[[1, 2, 3, 4]]]]
>>> [[[[1, 2, 3, 40]]]]
[[[[1, 2, 3, 40]]]]
>>> l
[[[[1, 2, 3, 4]]]]
>>> [1,2,3]
[1, 2, 3]
>>> l[0]
[[[1, 2, 3, 4]]]
>>> type(l[0]
... )
<class 'list'>
>>> l[0][0]
[[1, 2, 3, 4]]
>>> l[0][0][0]
[1, 2, 3, 4]
>>> l[0][0][0][-1] = 40
>>> l
[[[[1, 2, 3, 40]]]]
>>> l[-1][-1][-1][-1] = 400
>>> l
[[[[1, 2, 3, 400]]]]
>>> l = [1,2,3]
>>> type(l)
<class 'list'>
>>> dir(list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__'
, '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__'
, '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__'
, '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_e
x__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__s
izeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'ex
tend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> l
[1, 2, 3]
>>> t = (1,2,3)
>>> t[0]
1
>>> t[0] = 20
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> len(t)
3
>>> 3 in t
True
>>> t == (1,2,3)
True
>>> t != (1,2,3)
False
>>> for e in t:
...     print(e)
...
1
2
3
>>> t
(1, 2, 3)
>>> l
[1, 2, 3]
>>> l.append(20)
>>> l
[1, 2, 3, 20]
>>> t.append(20)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'append'
>>> t[0]
1
>>> t[-1]
3
>>> t[0:2]
(1, 2)
>>> l = [1,2,1,1,2]
>>> len(l)
5
>>> s = { 1,2,1,1,2}
>>> s
{1, 2}
>>> list(set(l))
[1, 2]
>>> ()
()
>>> []
[]
>>> set()
set()
>>> type({})
<class 'dict'>
>>> type(set())
<class 'set'>
>>> s = {1,2,3,4}
>>> len(s)
4
>>> 3 in s
True
>>> 30 not in s
True
>>> s
{1, 2, 3, 4}
>>> s == { 4,2,3,1}
True
>>> s = {1,2,3}
>>> s
{1, 2, 3}
>>> s[0]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'set' object does not support indexing
>>> s.append(20)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'set' object has no attribute 'append'
>>> s.add(20)
>>> s
{1, 2, 3, 20}
>>> s
{1, 2, 3, 20}
>>> s1 = {1,2,3}
>>> s2 = {3,4,5}
>>> s1 | s2
{1, 2, 3, 4, 5}
>>> s1 & s2
{3}
>>> s1 - s2
{1, 2}
>>> s1 ^ s2
{1, 2, 4, 5}
>>> for e in s:
...     print(e)
...
1
2
3
20
>>> (s1-s2)|(s2-s1)
{1, 2, 4, 5}
>>>









































































































